# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Home

    if not defined?(::Home::InvalidOperationException)
        class InvalidOperationException < Ice::UserException
            def initialize
            end

            def to_s
                '::Home::InvalidOperationException'
            end
        end

        T_InvalidOperationException = ::Ice::__defineException('::Home::InvalidOperationException', InvalidOperationException, false, nil, [])
    end

    if not defined?(::Home::AlreadyOnException)
        class AlreadyOnException < ::Home::InvalidOperationException
            def initialize
            end

            def to_s
                '::Home::AlreadyOnException'
            end
        end

        T_AlreadyOnException = ::Ice::__defineException('::Home::AlreadyOnException', AlreadyOnException, false, ::Home::T_InvalidOperationException, [])
    end

    if not defined?(::Home::AlreadyOffException)
        class AlreadyOffException < ::Home::InvalidOperationException
            def initialize
            end

            def to_s
                '::Home::AlreadyOffException'
            end
        end

        T_AlreadyOffException = ::Ice::__defineException('::Home::AlreadyOffException', AlreadyOffException, false, ::Home::T_InvalidOperationException, [])
    end

    if not defined?(::Home::NoDataException)
        class NoDataException < Ice::UserException
            def initialize
            end

            def to_s
                '::Home::NoDataException'
            end
        end

        T_NoDataException = ::Ice::__defineException('::Home::NoDataException', NoDataException, false, nil, [])
    end

    if not defined?(::Home::Device_Mixin)

        module ::Home::Device_Mixin
        end
        module DevicePrx_mixin

            def on(context=nil)
                DevicePrx_mixin::OP_on.invoke(self, [], context)
            end

            def off(context=nil)
                DevicePrx_mixin::OP_off.invoke(self, [], context)
            end
        end

        class DevicePrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include DevicePrx_mixin
        end

        if not defined?(::Home::T_DevicePrx)
            T_Device = ::Ice::__declareClass('::Home::Device')
            T_DevicePrx = ::Ice::__declareProxy('::Home::Device')
        end

        T_Device.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_DevicePrx.defineProxy(DevicePrx, nil, [])

        DevicePrx_mixin::OP_on = ::Ice::__defineOperation('on', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [::Home::T_AlreadyOnException])
        DevicePrx_mixin::OP_off = ::Ice::__defineOperation('off', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [::Home::T_AlreadyOffException])
    end

    if not defined?(::Home::CCTVStatus)
        class CCTVStatus
            include ::Ice::Inspect_mixin
            def initialize(theta=0, zoom=0)
                @theta = theta
                @zoom = zoom
            end

            def hash
                _h = 0
                _h = 5 * _h + @theta.hash
                _h = 5 * _h + @zoom.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Home::CCTVStatus or
                    @theta != other.theta or
                    @zoom != other.zoom
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :theta, :zoom
        end

        T_CCTVStatus = ::Ice::__defineStruct('::Home::CCTVStatus', CCTVStatus, [
            ["theta", ::Ice::T_int],
            ["zoom", ::Ice::T_int]
        ])
    end

    if not defined?(::Home::CCTV_Mixin)

        module ::Home::CCTV_Mixin
        end
        module CCTVPrx_mixin
            include ::Home::DevicePrx_mixin

            def zoomIn(zoom, context=nil)
                CCTVPrx_mixin::OP_zoomIn.invoke(self, [zoom], context)
            end

            def zoomOut(zoom, context=nil)
                CCTVPrx_mixin::OP_zoomOut.invoke(self, [zoom], context)
            end

            def tiltLeft(theta, context=nil)
                CCTVPrx_mixin::OP_tiltLeft.invoke(self, [theta], context)
            end

            def tiltRight(theta, context=nil)
                CCTVPrx_mixin::OP_tiltRight.invoke(self, [theta], context)
            end

            def getStatus(context=nil)
                CCTVPrx_mixin::OP_getStatus.invoke(self, [], context)
            end
        end

        class CCTVPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include CCTVPrx_mixin
        end

        if not defined?(::Home::T_CCTVPrx)
            T_CCTV = ::Ice::__declareClass('::Home::CCTV')
            T_CCTVPrx = ::Ice::__declareProxy('::Home::CCTV')
        end

        T_CCTV.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_CCTVPrx.defineProxy(CCTVPrx, nil, [::Home::T_DevicePrx])

        CCTVPrx_mixin::OP_zoomIn = ::Ice::__defineOperation('zoomIn', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        CCTVPrx_mixin::OP_zoomOut = ::Ice::__defineOperation('zoomOut', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        CCTVPrx_mixin::OP_tiltLeft = ::Ice::__defineOperation('tiltLeft', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        CCTVPrx_mixin::OP_tiltRight = ::Ice::__defineOperation('tiltRight', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        CCTVPrx_mixin::OP_getStatus = ::Ice::__defineOperation('getStatus', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Home::T_CCTVStatus, false, 0], [])
    end

    if not defined?(::Home::T_Readings)
        T_Readings = ::Ice::__defineSequence('::Home::Readings', ::Ice::T_double)
    end

    if not defined?(::Home::Sensor_Mixin)

        module ::Home::Sensor_Mixin
        end
        module SensorPrx_mixin
            include ::Home::DevicePrx_mixin

            def getLastReading(context=nil)
                SensorPrx_mixin::OP_getLastReading.invoke(self, [], context)
            end

            def getReadings(context=nil)
                SensorPrx_mixin::OP_getReadings.invoke(self, [], context)
            end
        end

        class SensorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include SensorPrx_mixin
        end

        if not defined?(::Home::T_SensorPrx)
            T_Sensor = ::Ice::__declareClass('::Home::Sensor')
            T_SensorPrx = ::Ice::__declareProxy('::Home::Sensor')
        end

        T_Sensor.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_SensorPrx.defineProxy(SensorPrx, nil, [::Home::T_DevicePrx])

        SensorPrx_mixin::OP_getLastReading = ::Ice::__defineOperation('getLastReading', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_double, false, 0], [::Home::T_NoDataException])
        SensorPrx_mixin::OP_getReadings = ::Ice::__defineOperation('getReadings', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Home::T_Readings, false, 0], [::Home::T_NoDataException])
    end

    if not defined?(::Home::LightSensor_Mixin)

        module ::Home::LightSensor_Mixin
        end
        module LightSensorPrx_mixin
            include ::Home::SensorPrx_mixin
        end

        class LightSensorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include LightSensorPrx_mixin
        end

        if not defined?(::Home::T_LightSensorPrx)
            T_LightSensor = ::Ice::__declareClass('::Home::LightSensor')
            T_LightSensorPrx = ::Ice::__declareProxy('::Home::LightSensor')
        end

        T_LightSensor.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_LightSensorPrx.defineProxy(LightSensorPrx, nil, [::Home::T_SensorPrx])
    end

    if not defined?(::Home::SoundSensor_Mixin)

        module ::Home::SoundSensor_Mixin
        end
        module SoundSensorPrx_mixin
            include ::Home::SensorPrx_mixin
        end

        class SoundSensorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include SoundSensorPrx_mixin
        end

        if not defined?(::Home::T_SoundSensorPrx)
            T_SoundSensor = ::Ice::__declareClass('::Home::SoundSensor')
            T_SoundSensorPrx = ::Ice::__declareProxy('::Home::SoundSensor')
        end

        T_SoundSensor.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_SoundSensorPrx.defineProxy(SoundSensorPrx, nil, [::Home::T_SensorPrx])
    end
end
